// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ehe_hubspot

import (
	"sync"
)

// Ensure, that IHubspotDealFlowAPIMock does implement IHubspotDealFlowAPI.
// If this is not the case, regenerate this file with moq.
var _ IHubspotDealFlowAPI = &IHubspotDealFlowAPIMock{}

// IHubspotDealFlowAPIMock is a mock implementation of IHubspotDealFlowAPI.
//
// 	func TestSomethingThatUsesIHubspotDealFlowAPI(t *testing.T) {
//
// 		// make and configure a mocked IHubspotDealFlowAPI
// 		mockedIHubspotDealFlowAPI := &IHubspotDealFlowAPIMock{
// 			AssociateDealFlowCardFunc: func(dealId string, assocId string, assocType CardAssociation) error {
// 				panic("mock out the AssociateDealFlowCard method")
// 			},
// 			CreateDealFlowCardFunc: func(cardName string, contactID string, companyID string, applicationId string) (*dealCreationResponse, error) {
// 				panic("mock out the CreateDealFlowCard method")
// 			},
// 			UpdateDealFlowCardFunc: func(dealId string, dealName string, dealStage string, applicationId string, dealValidationCheckFinished bool) error {
// 				panic("mock out the UpdateDealFlowCard method")
// 			},
// 			UpdateDealFlowCardValidationStatusFunc: func(dealId string, dealValidationCheckFinished bool) error {
// 				panic("mock out the UpdateDealFlowCardValidationStatus method")
// 			},
// 		}
//
// 		// use mockedIHubspotDealFlowAPI in code that requires IHubspotDealFlowAPI
// 		// and then make assertions.
//
// 	}
type IHubspotDealFlowAPIMock struct {
	// AssociateDealFlowCardFunc mocks the AssociateDealFlowCard method.
	AssociateDealFlowCardFunc func(dealId string, assocId string, assocType CardAssociation) error

	// CreateDealFlowCardFunc mocks the CreateDealFlowCard method.
	CreateDealFlowCardFunc func(cardName string, contactID string, companyID string, applicationId string) (*dealCreationResponse, error)

	// UpdateDealFlowCardFunc mocks the UpdateDealFlowCard method.
	UpdateDealFlowCardFunc func(dealId string, dealName string, dealStage string, applicationId string, dealValidationCheckFinished bool) error

	// UpdateDealFlowCardValidationStatusFunc mocks the UpdateDealFlowCardValidationStatus method.
	UpdateDealFlowCardValidationStatusFunc func(dealId string, dealValidationCheckFinished bool) error

	// calls tracks calls to the methods.
	calls struct {
		// AssociateDealFlowCard holds details about calls to the AssociateDealFlowCard method.
		AssociateDealFlowCard []struct {
			// DealId is the dealId argument value.
			DealId string
			// AssocId is the assocId argument value.
			AssocId string
			// AssocType is the assocType argument value.
			AssocType CardAssociation
		}
		// CreateDealFlowCard holds details about calls to the CreateDealFlowCard method.
		CreateDealFlowCard []struct {
			// CardName is the cardName argument value.
			CardName string
			// ContactID is the contactID argument value.
			ContactID string
			// CompanyID is the companyID argument value.
			CompanyID string
			// ApplicationId is the applicationId argument value.
			ApplicationId string
		}
		// UpdateDealFlowCard holds details about calls to the UpdateDealFlowCard method.
		UpdateDealFlowCard []struct {
			// DealId is the dealId argument value.
			DealId string
			// DealName is the dealName argument value.
			DealName string
			// DealStage is the dealStage argument value.
			DealStage string
			// ApplicationId is the applicationId argument value.
			ApplicationId string
			// DealValidationCheckFinished is the dealValidationCheckFinished argument value.
			DealValidationCheckFinished bool
		}
		// UpdateDealFlowCardValidationStatus holds details about calls to the UpdateDealFlowCardValidationStatus method.
		UpdateDealFlowCardValidationStatus []struct {
			// DealId is the dealId argument value.
			DealId string
			// DealValidationCheckFinished is the dealValidationCheckFinished argument value.
			DealValidationCheckFinished bool
		}
	}
	lockAssociateDealFlowCard              sync.RWMutex
	lockCreateDealFlowCard                 sync.RWMutex
	lockUpdateDealFlowCard                 sync.RWMutex
	lockUpdateDealFlowCardValidationStatus sync.RWMutex
}

// AssociateDealFlowCard calls AssociateDealFlowCardFunc.
func (mock *IHubspotDealFlowAPIMock) AssociateDealFlowCard(dealId string, assocId string, assocType CardAssociation) error {
	if mock.AssociateDealFlowCardFunc == nil {
		panic("IHubspotDealFlowAPIMock.AssociateDealFlowCardFunc: method is nil but IHubspotDealFlowAPI.AssociateDealFlowCard was just called")
	}
	callInfo := struct {
		DealId    string
		AssocId   string
		AssocType CardAssociation
	}{
		DealId:    dealId,
		AssocId:   assocId,
		AssocType: assocType,
	}
	mock.lockAssociateDealFlowCard.Lock()
	mock.calls.AssociateDealFlowCard = append(mock.calls.AssociateDealFlowCard, callInfo)
	mock.lockAssociateDealFlowCard.Unlock()
	return mock.AssociateDealFlowCardFunc(dealId, assocId, assocType)
}

// AssociateDealFlowCardCalls gets all the calls that were made to AssociateDealFlowCard.
// Check the length with:
//     len(mockedIHubspotDealFlowAPI.AssociateDealFlowCardCalls())
func (mock *IHubspotDealFlowAPIMock) AssociateDealFlowCardCalls() []struct {
	DealId    string
	AssocId   string
	AssocType CardAssociation
} {
	var calls []struct {
		DealId    string
		AssocId   string
		AssocType CardAssociation
	}
	mock.lockAssociateDealFlowCard.RLock()
	calls = mock.calls.AssociateDealFlowCard
	mock.lockAssociateDealFlowCard.RUnlock()
	return calls
}

// CreateDealFlowCard calls CreateDealFlowCardFunc.
func (mock *IHubspotDealFlowAPIMock) CreateDealFlowCard(cardName string, contactID string, companyID string, applicationId string) (*dealCreationResponse, error) {
	if mock.CreateDealFlowCardFunc == nil {
		panic("IHubspotDealFlowAPIMock.CreateDealFlowCardFunc: method is nil but IHubspotDealFlowAPI.CreateDealFlowCard was just called")
	}
	callInfo := struct {
		CardName      string
		ContactID     string
		CompanyID     string
		ApplicationId string
	}{
		CardName:      cardName,
		ContactID:     contactID,
		CompanyID:     companyID,
		ApplicationId: applicationId,
	}
	mock.lockCreateDealFlowCard.Lock()
	mock.calls.CreateDealFlowCard = append(mock.calls.CreateDealFlowCard, callInfo)
	mock.lockCreateDealFlowCard.Unlock()
	return mock.CreateDealFlowCardFunc(cardName, contactID, companyID, applicationId)
}

// CreateDealFlowCardCalls gets all the calls that were made to CreateDealFlowCard.
// Check the length with:
//     len(mockedIHubspotDealFlowAPI.CreateDealFlowCardCalls())
func (mock *IHubspotDealFlowAPIMock) CreateDealFlowCardCalls() []struct {
	CardName      string
	ContactID     string
	CompanyID     string
	ApplicationId string
} {
	var calls []struct {
		CardName      string
		ContactID     string
		CompanyID     string
		ApplicationId string
	}
	mock.lockCreateDealFlowCard.RLock()
	calls = mock.calls.CreateDealFlowCard
	mock.lockCreateDealFlowCard.RUnlock()
	return calls
}

// UpdateDealFlowCard calls UpdateDealFlowCardFunc.
func (mock *IHubspotDealFlowAPIMock) UpdateDealFlowCard(dealId string, dealName string, dealStage string, applicationId string, dealValidationCheckFinished bool) error {
	if mock.UpdateDealFlowCardFunc == nil {
		panic("IHubspotDealFlowAPIMock.UpdateDealFlowCardFunc: method is nil but IHubspotDealFlowAPI.UpdateDealFlowCard was just called")
	}
	callInfo := struct {
		DealId                      string
		DealName                    string
		DealStage                   string
		ApplicationId               string
		DealValidationCheckFinished bool
	}{
		DealId:                      dealId,
		DealName:                    dealName,
		DealStage:                   dealStage,
		ApplicationId:               applicationId,
		DealValidationCheckFinished: dealValidationCheckFinished,
	}
	mock.lockUpdateDealFlowCard.Lock()
	mock.calls.UpdateDealFlowCard = append(mock.calls.UpdateDealFlowCard, callInfo)
	mock.lockUpdateDealFlowCard.Unlock()
	return mock.UpdateDealFlowCardFunc(dealId, dealName, dealStage, applicationId, dealValidationCheckFinished)
}

// UpdateDealFlowCardCalls gets all the calls that were made to UpdateDealFlowCard.
// Check the length with:
//     len(mockedIHubspotDealFlowAPI.UpdateDealFlowCardCalls())
func (mock *IHubspotDealFlowAPIMock) UpdateDealFlowCardCalls() []struct {
	DealId                      string
	DealName                    string
	DealStage                   string
	ApplicationId               string
	DealValidationCheckFinished bool
} {
	var calls []struct {
		DealId                      string
		DealName                    string
		DealStage                   string
		ApplicationId               string
		DealValidationCheckFinished bool
	}
	mock.lockUpdateDealFlowCard.RLock()
	calls = mock.calls.UpdateDealFlowCard
	mock.lockUpdateDealFlowCard.RUnlock()
	return calls
}

// UpdateDealFlowCardValidationStatus calls UpdateDealFlowCardValidationStatusFunc.
func (mock *IHubspotDealFlowAPIMock) UpdateDealFlowCardValidationStatus(dealId string, dealValidationCheckFinished bool) error {
	if mock.UpdateDealFlowCardValidationStatusFunc == nil {
		panic("IHubspotDealFlowAPIMock.UpdateDealFlowCardValidationStatusFunc: method is nil but IHubspotDealFlowAPI.UpdateDealFlowCardValidationStatus was just called")
	}
	callInfo := struct {
		DealId                      string
		DealValidationCheckFinished bool
	}{
		DealId:                      dealId,
		DealValidationCheckFinished: dealValidationCheckFinished,
	}
	mock.lockUpdateDealFlowCardValidationStatus.Lock()
	mock.calls.UpdateDealFlowCardValidationStatus = append(mock.calls.UpdateDealFlowCardValidationStatus, callInfo)
	mock.lockUpdateDealFlowCardValidationStatus.Unlock()
	return mock.UpdateDealFlowCardValidationStatusFunc(dealId, dealValidationCheckFinished)
}

// UpdateDealFlowCardValidationStatusCalls gets all the calls that were made to UpdateDealFlowCardValidationStatus.
// Check the length with:
//     len(mockedIHubspotDealFlowAPI.UpdateDealFlowCardValidationStatusCalls())
func (mock *IHubspotDealFlowAPIMock) UpdateDealFlowCardValidationStatusCalls() []struct {
	DealId                      string
	DealValidationCheckFinished bool
} {
	var calls []struct {
		DealId                      string
		DealValidationCheckFinished bool
	}
	mock.lockUpdateDealFlowCardValidationStatus.RLock()
	calls = mock.calls.UpdateDealFlowCardValidationStatus
	mock.lockUpdateDealFlowCardValidationStatus.RUnlock()
	return calls
}
