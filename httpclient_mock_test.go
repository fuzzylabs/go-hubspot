// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package go_hubspot

import (
	"net/http"
	"sync"
)

// Ensure, that IHTTPClientMock does implement IHTTPClient.
// If this is not the case, regenerate this file with moq.
var _ IHTTPClient = &IHTTPClientMock{}

// IHTTPClientMock is a mock implementation of IHTTPClient.
//
// 	func TestSomethingThatUsesIHTTPClient(t *testing.T) {
//
// 		// make and configure a mocked IHTTPClient
// 		mockedIHTTPClient := &IHTTPClientMock{
// 			DoFunc: func(req *http.Request) (*http.Response, error) {
// 				panic("mock out the Do method")
// 			},
// 			GetFunc: func(url string) (*http.Response, error) {
// 				panic("mock out the Get method")
// 			},
// 		}
//
// 		// use mockedIHTTPClient in code that requires IHTTPClient
// 		// and then make assertions.
//
// 	}
type IHTTPClientMock struct {
	// DoFunc mocks the Do method.
	DoFunc func(req *http.Request) (*http.Response, error)

	// GetFunc mocks the Get method.
	GetFunc func(url string) (*http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// Req is the req argument value.
			Req *http.Request
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// URL is the url argument value.
			URL string
		}
	}
	lockDo  sync.RWMutex
	lockGet sync.RWMutex
}

// Do calls DoFunc.
func (mock *IHTTPClientMock) Do(req *http.Request) (*http.Response, error) {
	if mock.DoFunc == nil {
		panic("IHTTPClientMock.DoFunc: method is nil but IHTTPClient.Do was just called")
	}
	callInfo := struct {
		Req *http.Request
	}{
		Req: req,
	}
	mock.lockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	mock.lockDo.Unlock()
	return mock.DoFunc(req)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//     len(mockedIHTTPClient.DoCalls())
func (mock *IHTTPClientMock) DoCalls() []struct {
	Req *http.Request
} {
	var calls []struct {
		Req *http.Request
	}
	mock.lockDo.RLock()
	calls = mock.calls.Do
	mock.lockDo.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *IHTTPClientMock) Get(url string) (*http.Response, error) {
	if mock.GetFunc == nil {
		panic("IHTTPClientMock.GetFunc: method is nil but IHTTPClient.Get was just called")
	}
	callInfo := struct {
		URL string
	}{
		URL: url,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(url)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedIHTTPClient.GetCalls())
func (mock *IHTTPClientMock) GetCalls() []struct {
	URL string
} {
	var calls []struct {
		URL string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}
