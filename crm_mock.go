// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ehe_hubspot

import (
	"bytes"
	"sync"
)

// Ensure, that IHubspotCRMAPIMock does implement IHubspotCRMAPI.
// If this is not the case, regenerate this file with moq.
var _ IHubspotCRMAPI = &IHubspotCRMAPIMock{}

// IHubspotCRMAPIMock is a mock implementation of IHubspotCRMAPI.
//
// 	func TestSomethingThatUsesIHubspotCRMAPI(t *testing.T) {
//
// 		// make and configure a mocked IHubspotCRMAPI
// 		mockedIHubspotCRMAPI := &IHubspotCRMAPIMock{
// 			GetCompanyForContactFunc: func(contactID string) (string, error) {
// 				panic("mock out the GetCompanyForContact method")
// 			},
// 			GetContactIDFunc: func(applicationId string, companyNumber string) (string, error) {
// 				panic("mock out the GetContactID method")
// 			},
// 			GetDealForCompanyFunc: func(companyID string) (string, error) {
// 				panic("mock out the GetDealForCompany method")
// 			},
// 			UpdateCompanyFunc: func(companyID string, jsonPayload *bytes.Buffer) error {
// 				panic("mock out the UpdateCompany method")
// 			},
// 		}
//
// 		// use mockedIHubspotCRMAPI in code that requires IHubspotCRMAPI
// 		// and then make assertions.
//
// 	}
type IHubspotCRMAPIMock struct {
	// GetCompanyForContactFunc mocks the GetCompanyForContact method.
	GetCompanyForContactFunc func(contactID string) (string, error)

	// GetContactIDFunc mocks the GetContactID method.
	GetContactIDFunc func(applicationId string, companyNumber string) (string, error)

	// GetDealForCompanyFunc mocks the GetDealForCompany method.
	GetDealForCompanyFunc func(companyID string) (string, error)

	// UpdateCompanyFunc mocks the UpdateCompany method.
	UpdateCompanyFunc func(companyID string, jsonPayload *bytes.Buffer) error

	// calls tracks calls to the methods.
	calls struct {
		// GetCompanyForContact holds details about calls to the GetCompanyForContact method.
		GetCompanyForContact []struct {
			// ContactID is the contactID argument value.
			ContactID string
		}
		// GetContactID holds details about calls to the GetContactID method.
		GetContactID []struct {
			// ApplicationId is the applicationId argument value.
			ApplicationId string
			// CompanyNumber is the companyNumber argument value.
			CompanyNumber string
		}
		// GetDealForCompany holds details about calls to the GetDealForCompany method.
		GetDealForCompany []struct {
			// CompanyID is the companyID argument value.
			CompanyID string
		}
		// UpdateCompany holds details about calls to the UpdateCompany method.
		UpdateCompany []struct {
			// CompanyID is the companyID argument value.
			CompanyID string
			// JsonPayload is the jsonPayload argument value.
			JsonPayload *bytes.Buffer
		}
	}
	lockGetCompanyForContact sync.RWMutex
	lockGetContactID         sync.RWMutex
	lockGetDealForCompany    sync.RWMutex
	lockUpdateCompany        sync.RWMutex
}

// GetCompanyForContact calls GetCompanyForContactFunc.
func (mock *IHubspotCRMAPIMock) GetCompanyForContact(contactID string) (string, error) {
	if mock.GetCompanyForContactFunc == nil {
		panic("IHubspotCRMAPIMock.GetCompanyForContactFunc: method is nil but IHubspotCRMAPI.GetCompanyForContact was just called")
	}
	callInfo := struct {
		ContactID string
	}{
		ContactID: contactID,
	}
	mock.lockGetCompanyForContact.Lock()
	mock.calls.GetCompanyForContact = append(mock.calls.GetCompanyForContact, callInfo)
	mock.lockGetCompanyForContact.Unlock()
	return mock.GetCompanyForContactFunc(contactID)
}

// GetCompanyForContactCalls gets all the calls that were made to GetCompanyForContact.
// Check the length with:
//     len(mockedIHubspotCRMAPI.GetCompanyForContactCalls())
func (mock *IHubspotCRMAPIMock) GetCompanyForContactCalls() []struct {
	ContactID string
} {
	var calls []struct {
		ContactID string
	}
	mock.lockGetCompanyForContact.RLock()
	calls = mock.calls.GetCompanyForContact
	mock.lockGetCompanyForContact.RUnlock()
	return calls
}

// GetContactID calls GetContactIDFunc.
func (mock *IHubspotCRMAPIMock) GetContactID(applicationId string, companyNumber string) (string, error) {
	if mock.GetContactIDFunc == nil {
		panic("IHubspotCRMAPIMock.GetContactIDFunc: method is nil but IHubspotCRMAPI.GetContactID was just called")
	}
	callInfo := struct {
		ApplicationId string
		CompanyNumber string
	}{
		ApplicationId: applicationId,
		CompanyNumber: companyNumber,
	}
	mock.lockGetContactID.Lock()
	mock.calls.GetContactID = append(mock.calls.GetContactID, callInfo)
	mock.lockGetContactID.Unlock()
	return mock.GetContactIDFunc(applicationId, companyNumber)
}

// GetContactIDCalls gets all the calls that were made to GetContactID.
// Check the length with:
//     len(mockedIHubspotCRMAPI.GetContactIDCalls())
func (mock *IHubspotCRMAPIMock) GetContactIDCalls() []struct {
	ApplicationId string
	CompanyNumber string
} {
	var calls []struct {
		ApplicationId string
		CompanyNumber string
	}
	mock.lockGetContactID.RLock()
	calls = mock.calls.GetContactID
	mock.lockGetContactID.RUnlock()
	return calls
}

// GetDealForCompany calls GetDealForCompanyFunc.
func (mock *IHubspotCRMAPIMock) GetDealForCompany(companyID string) (string, error) {
	if mock.GetDealForCompanyFunc == nil {
		panic("IHubspotCRMAPIMock.GetDealForCompanyFunc: method is nil but IHubspotCRMAPI.GetDealForCompany was just called")
	}
	callInfo := struct {
		CompanyID string
	}{
		CompanyID: companyID,
	}
	mock.lockGetDealForCompany.Lock()
	mock.calls.GetDealForCompany = append(mock.calls.GetDealForCompany, callInfo)
	mock.lockGetDealForCompany.Unlock()
	return mock.GetDealForCompanyFunc(companyID)
}

// GetDealForCompanyCalls gets all the calls that were made to GetDealForCompany.
// Check the length with:
//     len(mockedIHubspotCRMAPI.GetDealForCompanyCalls())
func (mock *IHubspotCRMAPIMock) GetDealForCompanyCalls() []struct {
	CompanyID string
} {
	var calls []struct {
		CompanyID string
	}
	mock.lockGetDealForCompany.RLock()
	calls = mock.calls.GetDealForCompany
	mock.lockGetDealForCompany.RUnlock()
	return calls
}

// UpdateCompany calls UpdateCompanyFunc.
func (mock *IHubspotCRMAPIMock) UpdateCompany(companyID string, jsonPayload *bytes.Buffer) error {
	if mock.UpdateCompanyFunc == nil {
		panic("IHubspotCRMAPIMock.UpdateCompanyFunc: method is nil but IHubspotCRMAPI.UpdateCompany was just called")
	}
	callInfo := struct {
		CompanyID   string
		JsonPayload *bytes.Buffer
	}{
		CompanyID:   companyID,
		JsonPayload: jsonPayload,
	}
	mock.lockUpdateCompany.Lock()
	mock.calls.UpdateCompany = append(mock.calls.UpdateCompany, callInfo)
	mock.lockUpdateCompany.Unlock()
	return mock.UpdateCompanyFunc(companyID, jsonPayload)
}

// UpdateCompanyCalls gets all the calls that were made to UpdateCompany.
// Check the length with:
//     len(mockedIHubspotCRMAPI.UpdateCompanyCalls())
func (mock *IHubspotCRMAPIMock) UpdateCompanyCalls() []struct {
	CompanyID   string
	JsonPayload *bytes.Buffer
} {
	var calls []struct {
		CompanyID   string
		JsonPayload *bytes.Buffer
	}
	mock.lockUpdateCompany.RLock()
	calls = mock.calls.UpdateCompany
	mock.lockUpdateCompany.RUnlock()
	return calls
}
